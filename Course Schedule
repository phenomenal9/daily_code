class Solution {
    public boolean checkForCycle(int src, int[] visited, int[] pathVisited, ArrayList<ArrayList<Integer>> adj){
        visited[src] = 1;
        pathVisited[src] = 1;
        for(int idx : adj.get(src))
        {
            if(visited[idx] == 0){
                if(checkForCycle(idx, visited, pathVisited, adj)) return true;
            }
            else if(pathVisited[idx] == 1)
                return true;
        }
        
        pathVisited[src] = 0;
        return false;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        
        for(int i=0; i<numCourses; i++)
            adj.add(new ArrayList<Integer>());
        
        for(int i=0; i<prerequisites.length; i++)
        {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        
        int pathVisited[] = new int[numCourses];
        int visited[] = new int[numCourses];
        
        for(int i=0; i<numCourses; i++)
        {
            if(visited[i] == 0)
            {
                if(checkForCycle(i, visited, pathVisited, adj)) return false;
            }
        }
        
        return true;
    }
}
