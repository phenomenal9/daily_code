class Solution {
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        int[][] matrix = new int[n][n];
    
        for(int i=0; i<edges.length; i++)
        {
            if(edges[i][2] <= distanceThreshold){
                matrix[edges[i][0]][edges[i][1]] = edges[i][2];
                matrix[edges[i][1]][edges[i][0]] = edges[i][2];
            }
        }
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(i != j && matrix[i][j] == 0)
                    matrix[i][j] = (int)1e9;
            }
        }

        for(int via = 0; via < matrix.length; via++){
            for(int i=0; i<matrix.length; i++){
                for(int j=0; j<matrix.length; j++){
                    if(matrix[i][via] + matrix[via][j] <= distanceThreshold)
                        matrix[i][j] = Math.min(matrix[i][j], matrix[i][via] + matrix[via][j]);
                }
            }
        }
        
        int findTheCity = 0;
        int count1 = n;
        for(int i=0; i<n; i++)
        {
            int count2 = 0;
            for(int j=0; j<n; j++)
            {
                if(i != j)
                {
                    if(matrix[i][j] <= distanceThreshold)
                    {
                        count2++;
                    }
                }
            }
            if(count1 > count2)
            {
                findTheCity = i;
                count1 = count2;
            }
            else if(count1 == count2){
                findTheCity = i;
            }
        }
        
        return findTheCity;
    }
}
