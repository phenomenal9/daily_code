class Pair1{
    int node;
    int edgeWt;

    Pair1(int node, int edgeWt){
        this.node = node;
        this.edgeWt = edgeWt;
    }
}
class Pair2{
    int time;
    int node;

    Pair2(int time, int node){
        this.time = time;
        this.node = node;
    }
}
class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<ArrayList<Pair1>> adj = new ArrayList<>();
        
        for(int i=0; i<n+1; i++)
            adj.add(new ArrayList<Pair1>());
        
        for(int i=0; i<times.length; i++)
        {
            adj.get(times[i][0]).add(new Pair1(times[i][1], times[i][2]));
        }
        
        int[] timeTaken = new int[n+1];
        
        for(int i=1; i<n+1; i++)
            timeTaken[i] = (int)1e9;
        
        timeTaken[0] = Integer.MIN_VALUE;
        
        timeTaken[k] = 0;
        
        PriorityQueue<Pair2> pq = new PriorityQueue<>((a,b) -> a.time - b.time);
        pq.offer(new Pair2(0, k));
        
        while(!pq.isEmpty())
        {
            int node = pq.peek().node;
            int time = pq.peek().time;
            pq.poll();
            
            for(Pair1 iter : adj.get(node))
            {
                int adjNode = iter.node;
                int edgeWt = iter.edgeWt;
                
                if(timeTaken[adjNode] > edgeWt + time)
                {
                    timeTaken[adjNode] = edgeWt + time;
                    pq.offer(new Pair2(timeTaken[adjNode], adjNode));
                }
            }
        }
        int minTime = 0;
        for(int i=1; i<n+1; i++)
        {
            minTime = Math.max(minTime, timeTaken[i]);
        }
        
        if(minTime >= (int)1e9) return -1;
        return minTime;
    }
}
