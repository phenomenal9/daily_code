import java.util.*;
public class Solution
{
	public static int findMinTime(HashMap<BinaryTreeNode<Integer>, BinaryTreeNode<Integer>> parentMap, BinaryTreeNode<Integer> startNode) {
		Queue<BinaryTreeNode<Integer>> q = new java.util.LinkedList<>();
		HashMap<BinaryTreeNode<Integer>, Integer> vis = new HashMap<>();
		q.offer(startNode);
		vis.put(startNode, 1);
		int timeTaken = 0;

		while(!q.isEmpty()) {
			int currSize = q.size();
			boolean isFiredUp = false;

			for(int i = 0; i < currSize; i++) {
				BinaryTreeNode<Integer> currNode = q.poll();

				if(currNode.left != null && vis.get(currNode.left) == null) {
					isFiredUp = true;
					q.offer(currNode.left);
					vis.put(currNode.left, 1);
				}

				if(currNode.right != null && vis.get(currNode.right) == null) {
					isFiredUp = true;
					q.offer(currNode.right);
					vis.put(currNode.right, 1);
				}

				if(parentMap.get(currNode) != null && vis.get(parentMap.get(currNode)) == null) {
					isFiredUp = true;
					q.offer(parentMap.get(currNode));
					vis.put(parentMap.get(currNode), 1);
				}
			}
			if(isFiredUp) timeTaken++;
		}
		return timeTaken;
		
	}
	public static BinaryTreeNode<Integer> bfsmapToParents(BinaryTreeNode<Integer> root, HashMap<BinaryTreeNode<Integer>, BinaryTreeNode<Integer>> parentMap, int start) {
		Queue<BinaryTreeNode<Integer>> q = new java.util.LinkedList<>();
		BinaryTreeNode<Integer> startNode = new BinaryTreeNode<Integer>(-1);
		q.offer(root);

		while(!q.isEmpty()) {
			BinaryTreeNode<Integer> currNode = q.poll();
			if(currNode.data == start) startNode = currNode;
			if(currNode.left != null) 
			{
				parentMap.put(currNode.left, currNode);
				q.offer(currNode.left);
			}

			if(currNode.right != null) {
				parentMap.put(currNode.right, currNode);
				q.offer(currNode.right);
			}
		}
		return startNode;
	}
public static int timeToBurnTree(BinaryTreeNode<Integer> root, int start)
    {
        // Write your code here.
		HashMap<BinaryTreeNode<Integer>, BinaryTreeNode<Integer>> parentMap = new HashMap<>();
		BinaryTreeNode<Integer> startingNode = bfsmapToParents(root, parentMap, start);
		int getMinTime = findMinTime(parentMap, startingNode);
		return getMinTime;
    }
}
