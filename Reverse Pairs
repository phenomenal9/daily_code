class Solution {
    public int merge(int[] nums, int left, int mid, int right)
    {
        int n1 = mid - left + 1;
        int n2 = right - mid;
        int count = 0;
        int k = left;
        int j = mid+1;
        //int[] temp = new int[nums.length];
        for(int i=left;i<=mid;i++){
            while(j<=right && nums[i]>(2*(long)nums[j])){
                count += (mid +1-i);
                j++;
            }
        }
        ArrayList<Integer> temp = new ArrayList<>();
        int i = left;
        j = mid + 1;
        while(i<=mid && j<=right){
            if(nums[i]<=nums[j]){
                temp.add(nums[i++]);
            }
            else{
                temp.add(nums[j++]);
            }
        }
            while(i<=mid){
                temp.add(nums[i++]);
            }
            while(j<=right){
                temp.add(nums[j++]);
            }
            for(i=left;i<=right;i++){
                nums[i] = temp.get(i-left);
            }
        return count;
    }
    public int mergeSort(int[] nums, int left, int right)
    {
        int mid = left + (right - left)/2;
        int count = 0;
        if(left<right)
        {
            count += mergeSort(nums, left, mid);
            count += mergeSort(nums, mid+1, right);
            count += merge(nums, left, mid, right);
        }
        
        return count;
    }
    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length - 1);
    }
}
