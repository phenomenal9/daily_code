//User function Template for Java
class Pair{
    int distance;
    int node;
    
    Pair(int distance, int node)
    {
        this.distance = distance;
        this.node = node;
    }
}

class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        int[] distanceArray = new int[V];
        
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b) -> a.distance - b.distance);
        for(int i=0; i<V; i++)
            distanceArray[i] = (int)1e9;
        pq.offer(new Pair(0, S));
        distanceArray[S] = 0;
        while(!pq.isEmpty())
        {
            Pair temp = pq.poll();
            
            for(int i = 0; i < adj.get(temp.node).size(); i++){
                int node = adj.get(temp.node).get(i).get(0);
                int edgeWt = adj.get(temp.node).get(i).get(1);
                if(distanceArray[node] > distanceArray[temp.node] + edgeWt){
                    distanceArray[node] = distanceArray[temp.node] + edgeWt;
                    pq.offer(new Pair(distanceArray[node], node));
                }
            }
        }
        return distanceArray;
    }
}

