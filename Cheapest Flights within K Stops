class Pair{
    int node;
    int edgeWt;

    Pair(int node, int edgeWt){
        this.node = node;
        this.edgeWt = edgeWt;
    }
}
class Tuple{
    int stops;
    int node;
    int distance;
    
    Tuple(int stops, int node, int distance){
        this.stops = stops;
        this.node = node;
        this.distance = distance;
    }
}
class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        
        for(int i=0; i<n; i++)
            adj.add(new ArrayList<Pair>());
        
        for(int i=0; i<flights.length; i++)
        {
            adj.get(flights[i][0]).add(new Pair(flights[i][1], flights[i][2]));
        }
        
        
        Queue<Tuple> pq = new java.util.LinkedList<>();
        
        pq.offer(new Tuple(0, src, 0));
        int[] distance = new int[n];
        
        for(int i=0; i<n; i++)
            distance[i] = (int)1e9;
        
        distance[src] = 0;
        
        while(!pq.isEmpty())
        {
            Tuple temp = pq.poll();
            if(temp.stops > k) continue;
            for(Pair iter : adj.get(temp.node))
            {
                int adjNode = iter.node;
                int edgeWt = iter.edgeWt;
                
                if(distance[adjNode] > temp.distance + edgeWt && temp.stops <= k)
                {
                    distance[adjNode] = temp.distance + edgeWt;
                    pq.offer(new Tuple(temp.stops + 1, adjNode, distance[adjNode]));
                }
            }
        }
        
        if(distance[dst] == (int)1e9) return -1;
        return distance[dst];
    }
}
