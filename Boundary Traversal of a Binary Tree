//User function Template for Java

// class Node  
// { 
//     int data; 
//     Node left, right; 
   
//     public Node(int d)  
//     { 
//         data = d; 
//         left = right = null; 
//     } 
// }

class Solution
{
    Boolean isLeaf(Node root)
    {
        return root.left == null && root.right == null;
    }
    void addLeftBoundary(Node root, ArrayList<Integer> res)
    {
        Node curr = root.left;
        while(curr != null)
        {
            if(!isLeaf(curr)) res.add(curr.data);
            if(curr.left == null) curr = curr.right;
            else curr = curr.left;
        }
    }
    
    void addRightBoundary(Node root, ArrayList<Integer> res)
    {
        Node curr = root.right;
        ArrayList<Integer> temp = new ArrayList<>();
        while(curr != null)
        {
            if(!isLeaf(curr)) temp.add(curr.data);
            if(curr.right == null) curr = curr.left;
            else curr = curr.right;
        }
        
        for(int i=temp.size()-1; i>=0; i--)
            res.add(temp.get(i));
    }
    
    void addLeafNodes(Node root, ArrayList<Integer> res)
    {
        if(isLeaf(root))
        {
            res.add(root.data);
            return;
        }
        
        if(root.left != null) addLeafNodes(root.left, res);
        if(root.right != null) addLeafNodes(root.right, res);
    }
	ArrayList <Integer> boundary(Node node)
	{
	    ArrayList<Integer> res = new ArrayList<>();
	    if(node == null) return res;
	    res.add(node.data);
	    if(node.right == null && node.left == null) return res;
	    addLeftBoundary(node, res);
	    addLeafNodes(node, res);
	    addRightBoundary(node, res);
	    
	    return res;
	}
}
