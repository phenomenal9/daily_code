class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        Deque<Integer> q = new ArrayDeque<>();
        ArrayList<Integer> ls = new ArrayList<>();
        for(int i=0; i<nums.length; i++)
        {
            while(!q.isEmpty() && nums[q.getLast()] <= nums[i])
            {
                q.removeLast();
            }
            q.add(i);
            
            // remove first element if it's outside the window
            if(q.getFirst() == i - k)
            {
                q.removeFirst();
            }
            
            // if window has k elements add to results (first k-1 windows have < k elements because we start from empty window and add 1 element each iteration)
            if(i >= k-1)
            {
                ls.add(nums[q.getFirst()]);
            }
        }
        
        return ls.stream().mapToInt(i -> i).toArray();
    }
}
