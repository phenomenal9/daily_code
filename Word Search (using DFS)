class Solution {
    public boolean dfs(char[][] board, int row, int col, String word, int idx) {
        if(idx == word.length() - 1 && word.charAt(idx) == board[row][col]) return true;
        boolean success = false;
        char currChar = board[row][col];
        board[row][col] = '1';
        idx++;
        int[] dx = {0, 1, 0, -1};
        int[] dy = {1, 0, -1, 0};
        
        for(int i = 0; i < 4; i++) {
            int nr = dx[i] + row;
            int nc = dy[i] + col;
            
            if(nr < 0 || nc < 0 || nr == board.length || nc == board[0].length || board[nr][nc] == '1') continue;
            
            if(idx < word.length() && word.charAt(idx) == board[nr][nc])
                success = true & dfs(board, nr, nc, word, idx);
            
            if(success == true)
                break;
            
        }
        
        board[row][col] = currChar;
        if(success == true) 
            return true;
        
        return false;
        
    }
    public boolean exist(char[][] board, String word) {
        char firstChar = word.charAt(0);
        
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) 
                if(board[i][j] == firstChar)
                    if(dfs(board, i, j, word, 0)) return true;
        }
        
        return false;
    }
}
