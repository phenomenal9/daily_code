import java.util.*;
public class Solution {
    public static int numberOfInversions(int []a, int n) {
        // Write your code here.
        return mergeSort(a, 0, n - 1);
    }

    public static int mergeSort(int[] arr, int left, int right) {
        int count = 0;
        if(left >= right) return count;
        
        int mid = left + (right - left) / 2;
        count += mergeSort(arr, left, mid);
        count += mergeSort(arr, mid + 1, right);

        count += merge(arr, left, mid, right);
        return count;
    }

    public static int merge(int[] arr, int l, int m, int r) {
        ArrayList<Integer> temp = new ArrayList<>();
        
        int count = 0;

        int i = l;
        int j = m + 1;

        while(i <= m && j <= r) {
            if(arr[i] <= arr[j]) {
                temp.add(arr[i++]);
            }
            else
            {
                count += (m - i + 1);
                temp.add(arr[j++]);
            }
        }

        while(i <= m) {
            temp.add(arr[i++]);
        }

        while(j <= r) {
            temp.add(arr[j++]);
        }

        for(i = l; i <= r; i++) {
            arr[i] = temp.get(i - l);
        }

        return count;
    }   
}
