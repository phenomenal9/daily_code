class Solution {
    public boolean searchNext(char[][] board, int row, int col, String word, int idx) {
        if(idx == word.length()) return true;
        
        if(row < 0 || col < 0 || row == board.length || col == board[0].length || word.charAt(idx) != board[row][col]) return false;
        
        char currChar = board[row][col];
        board[row][col] = '1';
        
        boolean top = searchNext(board, row - 1, col, word, idx + 1);
        boolean bottom = searchNext(board, row + 1, col, word, idx + 1);
        boolean left = searchNext(board, row, col - 1, word, idx + 1);
        boolean right = searchNext(board, row, col + 1, word, idx + 1);
        
        board[row][col] = currChar;
        return top || bottom || left || right;
    }
    public boolean exist(char[][] board, String word) {
        char firstChar = word.charAt(0);
        
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) 
                if(board[i][j] == firstChar)
                    if(searchNext(board, i, j, word, 0)) return true;
        }
        
        return false;
    }
}
