class DisjointSet {
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    public DisjointSet(int n) {
        for (int i = 0; i < n; i++) {
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node) {
        if (node == parent.get(node)) {
            return node;
        }
        int ulp = findUPar(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }


    public void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size.get(ulp_u) < size.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        } else {
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
    
    public int connectedComponents(){
        int connComp = 0;
        for(int i=0; i<parent.size(); i++){
            //findUPar(i);
            if(parent.get(i) == i) connComp++;
        }
        return connComp;
    }

}

class Solution {
    public int swimInWater(int[][] grid) {
        List<Integer> positions = new ArrayList<>();
        int n = grid.length;
        DisjointSet ds = new DisjointSet(n * n);
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                positions.add(i * n + j);
            }
        }
        
        Collections.sort(positions, (a, b) -> grid[a / n][a % n] - grid[b / n][b % n]);
        int[] dx = {0, 1, 0, -1};
        int[] dy = {1, 0, -1, 0};
        
        for(int i = 0; i < positions.size(); i++) {
            int currPos = positions.get(i);
            int row = positions.get(i) / n;
            int col = positions.get(i) % n;
            
            for(int j = 0; j < 4; j++) {
                int nr = row + dx[j];
                int nc = col + dy[j];
                
                if(nr < 0 || nc < 0 || nr == n || nc == n || grid[row][col] < grid[nr][nc]) continue;
                
                int adjPos = nr * n + nc;
                ds.unionBySize(currPos, adjPos);
            }
            if(ds.findUPar(0) == ds.findUPar((n - 1) * n + (n - 1))) return grid[row][col];
            
        }
        
        return -1;
    }
}
