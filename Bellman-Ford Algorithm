/*
*   edges: vector of vectors which represents the graph
*   S: source vertex to start traversing graph with
*   V: number of vertices
*/
class Solution {
    static int[] bellman_ford(int V, ArrayList<ArrayList<Integer>> edges, int S) {
        // Write your code here
        int[] distance = new int[V];
        for(int i=0; i<V; i++)
            distance[i] = (int)1e8;
            
        distance[S] = 0;
        for(int i=0; i<V; i++)
        {
            for(int j=0; j<edges.size(); j++)
            {
                int u = edges.get(j).get(0);
                int v = edges.get(j).get(1);
                int wt = edges.get(j).get(2);
        
                if(distance[u] != (int)1e8)
                {
                    if(distance[v] > distance[u] + wt)
                        distance[v] = distance[u] + wt;
                }
            }
        }
        
        for(int j=0; j<edges.size(); j++){
            int u = edges.get(j).get(0);
            int v = edges.get(j).get(1);
            int wt = edges.get(j).get(2);
    
            if(distance[u] != (int)1e8 && distance[v] > distance[u] + wt)
            {
                return new int[]{-1};
            }
        }
        
        return distance;
    }
}
