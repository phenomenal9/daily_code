class Solution {
    public int findKthLargest(int[] nums, int k) {
        return quickSelect(nums, 0, nums.length - 1, nums.length - k + 1);
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    public int partition(int[] nums, int left, int right) {
        int pivot = right;
        int i = left - 1;
        
        for(int j = left; j <= right - 1; j++) {
            if(nums[j] < nums[pivot]) {
                i++;
                swap(nums, i, j);
            }
        }
        swap(nums, i+1, pivot);
        
        return i+1;
        
    }
    public int quickSelect(int[] nums, int left, int right, int k) {
        if(left == right) return nums[left];
        
        int pivot = partition(nums, left, right);
        
        if(pivot + 1 == k){
            return nums[pivot];
        } 
        
        if(pivot + 1 > k) {
            return quickSelect(nums, left, pivot - 1, k);
        }
        
        else {
            return quickSelect(nums, pivot + 1, right, k);
        }
    }
}
