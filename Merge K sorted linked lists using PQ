/*class Node
{
    int data;
    Node next;
    
    Node(int key)
    {
        data = key;
        next = null;
    }
}
*/

// a is an array of Nodes of the heads of linked lists
// and N is size of array a


class Solution
{
    //Function to merge K sorted linked list.
    Node mergeKList(Node[]arr,int K)
    {
        //Add your code here.
        PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> a.data - b.data);
        
        for(int i = 0; i < K; i++) {
            Node curr = arr[i];
            while(curr != null) {
                pq.offer(curr);
                curr = curr.next;
            }
        }
        
        Node temp = pq.poll();
        Node curr = null;
        for(int i = 0; i < K; i++) {
            curr = arr[i];
            if(curr == temp) {
                break;
            }
        }
        
        while(!pq.isEmpty()) {
            curr.next = pq.poll();
            curr = curr.next;
        }
        
        return temp;
    }
}
