// Using only Memoization
class Solution {
    public int findLCS(String text1, String text2, int m, int n, int[][] t) {
        if(m == 0 || n == 0) return 0;
        
        if(t[m][n] != -1) return t[m][n];
        
        // Choice Diagram
        
        if(text1.charAt(m-1) == text2.charAt(n-1)) 
            return t[m][n] = 1 + findLCS(text1, text2, m-1, n-1, t);
        
        else
            return t[m][n] = Math.max(findLCS(text1, text2, m-1, n, t), findLCS(text1, text2, m, n-1, t));
    }
    public int longestCommonSubsequence(String text1, String text2) {
        int[][] t = new int[text1.length() + 1][text2.length() + 1];
        
        for(int i = 0; i < text1.length() + 1; i++) {
            for(int j = 0; j < text2.length() + 1; j++)
                t[i][j] = -1;
        }
        return findLCS(text1, text2, text1.length(), text2.length(), t);
    }
}
