class Pair {
    String first;
    int second;
    
    Pair(String first, int second) {
        this.first = first;
        this.second = second;
    }
}
class Solution
{
    public int wordLadderLength(String startWord, String targetWord, String[] wordList)
    {
        // Code here
        Set<String> hs = new HashSet<>();
        
        for(int i=0; i<wordList.length; i++) {
            hs.add(wordList[i]);
        }
        
        hs.remove(startWord);
        
        if(!hs.contains(targetWord)) return 0;
        
        Queue<Pair> q = new java.util.LinkedList<>();
        
        q.offer(new Pair(startWord, 1));
        
        while(!q.isEmpty()) {
            int steps = q.peek().second;
            String word = q.peek().first;
            if(word.equals(targetWord)) return steps;
            q.poll();
            
            for(int i=0; i<word.length(); i++) {
                char orig = word.charAt(i);
                for(char ch = 'a'; ch <= 'z'; ch++) {
                    char[] replacedCh = word.toCharArray();
                    replacedCh[i] = ch;
                    String newWord = new String(replacedCh);
                    
                    if(hs.contains(newWord)){
                        hs.remove(newWord);
                        q.offer(new Pair(newWord, steps + 1));
                    }
                }
            }
        }
        
        return 0;
    }
}
