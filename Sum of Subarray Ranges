class Solution {
    
    //https://leetcode.com/problems/sum-of-subarray-ranges/discuss/2696122/Java-Simple-Solution-w-Detailed-Explanation-Using-Monotonic-Stack
    
    public long subArrayRanges(int[] nums) {
        long sum = 0;
        if (nums == null || nums.length <= 1) return 0L;
        Stack<Integer> stk = new Stack<>();
        for(int i=0; i<=nums.length; i++)
        {
            while(!stk.isEmpty() && (i==nums.length || nums[stk.peek()] < nums[i]))
            {
                int currMax = stk.pop();
                int left = stk.isEmpty() ? -1 : stk.peek();
                int right = i;
                
                sum += (long) (currMax - left) * (right - currMax) * nums[currMax];
            }
            stk.push(i);
        }
        
        stk.clear();
        
        for(int i=0; i<=nums.length; i++)
        {
            while(!stk.isEmpty() && (i==nums.length || nums[stk.peek()] > nums[i]))
            {
                int currMin = stk.pop();
                int left = stk.isEmpty() ? -1 : stk.peek();
                int right = i;
                
                sum -= (long) (currMin - left) * (right - currMin) * nums[currMin];
            }
            stk.push(i);
        }
        
        return sum;
    }
}
