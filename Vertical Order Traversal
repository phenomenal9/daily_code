/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Tuple{
    TreeNode node;
    int row;
    int col;
    Tuple(TreeNode node, int row, int col)
    {
        this.node = node;
        this.row = row;
        this.col = col;
    }
}
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        Queue<Tuple> q = new java.util.LinkedList<>();
        
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> mp = new TreeMap<>();
        
        List<List<Integer>> res = new ArrayList<>();
        q.offer(new Tuple(root, 0, 0));
        
        while(!q.isEmpty())
        {
            Tuple temp = q.poll();
            TreeNode node = temp.node;
            int x = temp.row;
            int y = temp.col;

            if (!mp.containsKey(x)) 
            {
                mp.put(x, new TreeMap < > ());
            }
            if (!mp.get(x).containsKey(y)) {
                mp.get(x).put(y, new PriorityQueue < > ());
            }
            
            mp.get(x).get(y).offer(node.val);
            
            if(node.left != null)
                q.offer(new Tuple(node.left, x - 1, y + 1));
            if(node.right != null)
                q.offer(new Tuple(node.right, x + 1, y + 1));
        }
        
        for (TreeMap < Integer, PriorityQueue < Integer >> ys: mp.values()) 
        {
            res.add(new ArrayList < > ());
            for (PriorityQueue < Integer > nodes: ys.values()) 
            {
                while (!nodes.isEmpty()) 
                {
                    res.get(res.size() - 1).add(nodes.poll());
                }
            }
        }
        
        return res;
    }
}
