class Solution
{
    //Function to find number of strongly connected components in the graph.
    public void dfs(int node, ArrayList<ArrayList<Integer>> adj, Stack<Integer> stk, int[] visited) {
        visited[node] = 1;
        
        for(int adjNode : adj.get(node)) {
            if(visited[adjNode] == 0)
                dfs(adjNode, adj, stk, visited);
        }
        stk.push(node);
    }
    
    public void dfsReversed(int node,  ArrayList<ArrayList<Integer>> adjReversed, int[] visited) {
        visited[node] = 1;
        
        for(int adjNode : adjReversed.get(node)) {
            if(visited[adjNode] == 0)
                dfsReversed(adjNode, adjReversed, visited);
        }
    }
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {
        //code here
        int[] visited = new int[V];
        Stack<Integer> stk = new Stack<>();
        
        for(int i=0; i<V; i++)
        {
            if(visited[i] == 0)
                dfs(i, adj, stk, visited);
        }
        
        ArrayList<ArrayList<Integer>> adjReversed = new ArrayList<>();
        
        for(int i=0; i<V; i++)
        {
            adjReversed.add(new ArrayList<>());
        }
        
        for(int i=0; i<adj.size(); i++) {
            for(int it : adj.get(i)) {
                adjReversed.get(it).add(i);
            }
        }
        Arrays.fill(visited, 0);
        int scc = 0;
        while(!stk.isEmpty()) {
            if(visited[stk.peek()] == 0) {
                dfsReversed(stk.peek(), adjReversed, visited);
                scc++;
            }
            stk.pop();
        }
        
        return scc;
    }
}
