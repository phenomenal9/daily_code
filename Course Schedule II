class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        
        for(int i=0; i<numCourses; i++)
            adj.add(new ArrayList<Integer>());
        
        for(int i=0; i<prerequisites.length; i++)
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        
        int indegree[] = new int[numCourses];
        Queue<Integer> q = new java.util.LinkedList<>();
        
        for(int i=0; i<numCourses; i++)
        {
            for(int idx : adj.get(i))
            {
                indegree[idx]++;
            }
        }
        
        for(int i=0; i<numCourses; i++)
        {
            if(indegree[i] == 0)
                q.offer(i);
        }
        
        ArrayList<Integer> topo = new ArrayList<>();
        
        while(!q.isEmpty())
        {
            int temp = q.poll();
            
            for(int node : adj.get(temp))
            {
                indegree[node]--;
                if(indegree[node] == 0)
                    q.offer(node);
            }
            
            topo.add(temp);
        }
        
        if(topo.size() != numCourses) return new int[]{};
        return topo.stream().mapToInt(i->i).toArray();
    }
}
