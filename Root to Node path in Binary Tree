/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    
    public int findPath(TreeNode root, int B, List<Integer> ls)
    {
        if(root == null)
            return 0;
        if(root.val == B)
        {
            ls.add(0, root.val);
            return 1;
        }
            
        
        int left = findPath(root.left, B, ls);
        if(left == 1) 
        {
            ls.add(0, root.val);
            return 1;
        }
        int right = findPath(root.right, B, ls);
        if(right == 1)
        {
            ls.add(0, root.val);
            return 1;
        }
        
        return 0;
    }
    
    public int[] solve(TreeNode A, int B) {
        List<Integer> ls = new ArrayList<>();
        findPath(A, B, ls);
        int[] res = new int[ls.size()];
        
        for(int i=0; i<res.length; i++)
        {
            res[i] = ls.get(i);
        }
        return res;
    }
}
