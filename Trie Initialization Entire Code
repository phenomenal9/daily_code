import java.util.* ;
import java.io.*; 

public class Trie {
    TrieNode root;
    public Trie() {
        // Write your code here.
        this.root = new TrieNode();
    }

    public void insert(String word) {
        // Write your code here.
        TrieNode currNode = root;

        for(int i=0; i<word.length(); i++) {
            if(!currNode.containsKey(word.charAt(i))) {
                currNode.put(word.charAt(i), new TrieNode());    
            }
            currNode = currNode.get(word.charAt(i));
            currNode.increasePrefix();
        }
        currNode.increaseEnd();
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.
        TrieNode currNode = root;
        for(int i=0; i<word.length(); i++) {
            if(!currNode.containsKey(word.charAt(i))) return 0;
            currNode = currNode.get(word.charAt(i));
        }

        return currNode.getEnd();
    }

    public int countWordsStartingWith(String word) {
        // Write your code here.
        TrieNode currNode = root;
        for(int i=0; i<word.length(); i++) {
            if(!currNode.containsKey(word.charAt(i))) return 0;
            currNode = currNode.get(word.charAt(i));
        }

        return currNode.getPrefix();
    }

    public void erase(String word) {
        // Write your code here.
        TrieNode currNode = root;
        for(int i=0; i<word.length(); i++) {
            if(!currNode.containsKey(word.charAt(i))) return;
            else {
                currNode = currNode.get(word.charAt(i));
                currNode.reducePrefix();
            }
        }

        currNode.deleteEnd();
    }
}
class TrieNode {
    TrieNode[] children;
    int cntPrefix = 0;
    int cntEndWith = 0;

    public TrieNode () {
        this.children = new TrieNode[26];
        for(int i=0; i<26; i++) children[i] = null;
    }

    boolean containsKey(char c) {
        return children[c - 'a'] != null;
    } 

    TrieNode get(char c) {
        return children[c - 'a'];
    }

    void put(char c, TrieNode node) {
        children[c - 'a'] = node;
    }
    void increaseEnd() {
        cntEndWith++;  
    }
     void increasePrefix() {
        cntPrefix++; 
    }
     void deleteEnd() {
        cntEndWith--; 
    }
     void reducePrefix() {
        cntPrefix--; 
    }
     int getEnd() {
        return cntEndWith; 
    }
     int getPrefix() {
        return cntPrefix; 
    }
}
