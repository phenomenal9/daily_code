/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer, Integer> mp = new HashMap<>();
        
        for(int i=0; i<inorder.length; i++)
            mp.put(inorder[i], i);
        
        TreeNode root = constructTree(postorder, 0, postorder.length - 1, inorder, 0, inorder.length-1, mp);
        
        return root;
    }
    
    public TreeNode constructTree(int[] postorder, int postStart, int postEnd, int[] inorder, int inStart, int inEnd, Map<Integer, Integer> mp)
    {
        if(postStart > postEnd || inStart > inEnd) return null;
        
        TreeNode root = new TreeNode(postorder[postEnd]);
        int inRoot = mp.get(postorder[postEnd]);
        
        int numNodes = inEnd - inRoot;
        
        root.right = constructTree(postorder, postEnd - numNodes, postEnd - 1, inorder, inRoot + 1, inEnd, mp);
        root.left = constructTree(postorder, postStart, postEnd - numNodes - 1, inorder, inStart, inRoot - 1, mp);
        
        return root;
    }
}
