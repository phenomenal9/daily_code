class Solution {
    public ListNode reverseList(ListNode head) 
    {
        if (head==null)
        {
            return head;
        }
        ListNode prev_node = head;
        ListNode new_node = prev_node.next;
        ListNode curr;
        
        while(new_node != null)
        {
            curr = new_node;
            new_node = curr.next;
            curr.next = prev_node;
            prev_node = curr;
        }
        head.next = null;
        head = prev_node;
        
        return head;
    }
    public ListNode rotateRight(ListNode head, int k) {
        int length = 0;
        if(head == null) return head;
        ListNode curr = head;
        while(curr!=null)
        {
            length += 1;
            curr = curr.next;
        }
        k %= length;
        
        if(k==0 || length==1) return head;
        head = reverseList(head);
        
        int i= 0;
        curr = head;
        ListNode prev = null;
        
        while(i<k)
        {
            prev = curr;
            curr = curr.next;
            i++;
        }
        
        prev.next = null;
        head = reverseList(head);
        prev = head;
        
        while(prev.next != null)
            prev = prev.next;
        prev.next = reverseList(curr);
        return head;
    }
}
