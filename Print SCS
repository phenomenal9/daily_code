class Solution {
    public void findLCS(String text1, String text2, int m, int n, int[][] t) {
        
        
        // Initialization
        
        for(int i=0; i<m+1; i++) 
            t[i][0] = 0;
        for(int j=0; j<n+1; j++)
            t[0][j] = 0;
        
        // Choice Diagram
        
        for(int i=1; i<m+1; i++) {
            for(int j=1; j<n+1; j++) {
                if(text1.charAt(i-1) == text2.charAt(j-1)) 
                    t[i][j] = 1 + t[i-1][j-1];
                else
                    t[i][j] = Math.max(t[i-1][j], t[i][j-1]);
            }
        }
    
    }
    public String shortestCommonSupersequence(String str1, String str2) {
        int m = str1.length();
        int n = str2.length();
        
        int[][] t = new int[m+1][n+1];
        findLCS(str1, str2, m, n, t);
        
        int lengthOfSCS = m + n - t[m][n];
        
        int i = m, j = n;
        StringBuilder res = new StringBuilder();
        while(i > 0 && j > 0) {
            
            if(str1.charAt(i-1) == str2.charAt(j-1)) {
                res.insert(0, str1.charAt(i-1));
                i--;
                j--;
            }
            else {
                if(t[i-1][j] > t[i][j-1]) {
                    res.insert(0, str1.charAt(i-1));
                    i--;
                }
                else
                {
                    res.insert(0, str2.charAt(j-1));
                    j--;
                }
            }
            
            
        }
        while(i > 0) {
            res.insert(0, str1.charAt(i-1));
            i--;
        }
        
        while(j > 0) {
            res.insert(0, str2.charAt(j-1));
            j--;
        }
        

        return res.toString();
    }
}
