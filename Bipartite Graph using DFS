class Solution {
    public boolean dfs(int[][] graph, int src, int[] color, int colorVal)
    {
        color[src] = colorVal;
        
        for(int node : graph[src])
        {
            boolean ans = true;
            if(color[node] == -1)
            {
                if(colorVal == 0)
                    ans = dfs(graph, node, color, 1);
                else
                    ans = dfs(graph, node, color, 0);
                
                if(!ans) return false;
            }
            
            else if(colorVal == color[node])
            {
                return false;
            }
                
        }
        return true;
    }
    public boolean isBipartite(int[][] graph) {
        int[] color = new int[graph.length];
        
        Arrays.fill(color, -1);
        
        for(int i=0; i<color.length; i++)
        {
            if(color[i] == -1){
                if(!dfs(graph, i, color, 0)) return false;
            }
        }
        
        return true;
    }
}
