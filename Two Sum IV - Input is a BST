/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class BSTIterator {
    private Stack<TreeNode> stk = new Stack<>();
    boolean reverse;
    public BSTIterator(TreeNode root, boolean isReverse) {
        reverse = isReverse;
        pushAll(root);
    }

    public int next() {
        TreeNode temp = stk.pop();
        if(!reverse) pushAll(temp.right);
        else pushAll(temp.left);
        return temp.val;
    }

    public boolean hasNext() {
        return !stk.isEmpty();
    }

    public void pushAll(TreeNode root)
    {
        while(root != null)
        {
            stk.push(root);
            if(!reverse)
            {
                root = root.left;
            }
            else
            {
                root = root.right;
            }
        }
    }
}
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        BSTIterator l = new BSTIterator(root, false);
        BSTIterator r = new BSTIterator(root, true);
        
        int i = l.next();
        int j = r.next();
        
        while(i < j)
        {
            if(i + j == k) return true;
            else if(i + j > k) j = r.next();
            else i = l.next();
        }
        return false;   
    }
}
