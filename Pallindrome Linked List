/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverse(ListNode head)
    {
        if(head == null || head.next == null) return head;
        
        ListNode prevNode = head;
        ListNode nextNode = head.next;
        
        while(nextNode != null)
        {
            ListNode currNode = nextNode;
            nextNode = currNode.next;
            currNode.next = prevNode;
            prevNode = currNode;
        }
        head.next = null;
        head = prevNode;
        
        return head;
    }
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast.next != null && fast.next.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        slow.next = reverse(slow.next);
        slow = slow.next;
        ListNode dummy = head;
        
        while(slow != null)
        {
            if(dummy.val != slow.val)
                return false;
            dummy = dummy.next;
            slow = slow.next;
        }
        return true;
    }
}
