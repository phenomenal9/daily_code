
class Solution
{
    static void dfs(int src, boolean[] visited, Stack<Integer> stk, ArrayList<ArrayList<Integer>> adj)
    {
        visited[src] = true;
        
        for(int node : adj.get(src))
        {
            if(!visited[node])
            {
                dfs(node, visited, stk, adj);
            }
        }
        
        stk.push(src);
        return;
    }
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        Stack<Integer> stk = new Stack<>();
        boolean[] visited = new boolean[V];
        
        for(int i=0; i<V; i++)
        {
            if(!visited[i])
                dfs(i, visited, stk, adj);
        }
        
        int[] res = new int[stk.size()];
        int i = 0;
        while(!stk.isEmpty())
        {
            res[i] = stk.pop();
            i++;
        }
        
        return res;
    }
}
