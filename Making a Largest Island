class DisjointSet {
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    public DisjointSet(int n) {
        for (int i = 0; i < n; i++) {
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node) {
        if (node == parent.get(node)) {
            return node;
        }
        int ulp = findUPar(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }

    public void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank.get(ulp_u) < rank.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
        } else if (rank.get(ulp_v) < rank.get(ulp_u)) {
            parent.set(ulp_v, ulp_u);
        } else {
            parent.set(ulp_v, ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u, rankU + 1);
        }
    }

    public void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size.get(ulp_u) < size.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        } else {
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
}

class Solution {
    public int largestIsland(int[][] grid) {
        int n = grid.length;
        DisjointSet ds = new DisjointSet(n * n);
        
        int[] dx = {0, 1, 0, -1};
        int[] dy = {1, 0, -1, 0};
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 0) continue;
                
                int node = i*n + j;
                
                for(int k=0; k<4; k++){
                    int nr = i + dx[k];
                    int nc = j + dy[k];
                    
                    if(nr<0 || nc<0 || nr==n || nc==n || grid[nr][nc] != 1) continue;
                    
                    int adjNode = nr * n + nc;
                    
                    ds.unionBySize(node, adjNode);
                }
            }
        }
        
        int largestIsland = 0;
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(grid[i][j] == 1) continue;
                
                HashSet<Integer> hs = new HashSet<>();
                
                for(int k=0; k<4; k++)
                {
                    int nr = i + dx[k];
                    int nc = j + dy[k];
                    
                    if(nr<0 || nc<0 || nr==n || nc==n) continue;
                    
                    int adjNode = nr * n + nc;
                    if(grid[nr][nc] == 1) hs.add(ds.findUPar(adjNode));
                }
                
                int sizeTotal = 0;
                for(Integer parents : hs)
                {
                    sizeTotal += ds.size.get(parents);
                }
                
                largestIsland = Math.max(largestIsland, sizeTotal + 1);
            }
        }
        
        for(int i=0; i<n*n; i++)
        {
            largestIsland = Math.max(largestIsland, ds.size.get(ds.findUPar(i)));
        }
        
        return largestIsland;
    }
}
