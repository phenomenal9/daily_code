class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums2.length;
        int n = nums1.length;
        if(m > n) {
            return findMedianSortedArrays(nums2, nums1); 
        }
        
        int k = ((m + n)/2) + 1;
        
        int low = Math.max(0,k-m), high = Math.min(k,n);
        double sum = 0;
        while(low <= high) {
            int cut1 = (low + high) >> 1; 
            int cut2 = k - cut1; 
            int l1 = cut1 == 0 ? Integer.MIN_VALUE : nums1[cut1 - 1]; 
            int l2 = cut2 == 0 ? Integer.MIN_VALUE : nums2[cut2 - 1];
            int r1 = cut1 == n ? Integer.MAX_VALUE : nums1[cut1]; 
            int r2 = cut2 == m ? Integer.MAX_VALUE : nums2[cut2]; 

            if(l1 <= r2 && l2 <= r1) {
                sum += (double)Math.max(l1, l2);
                if((m + n) % 2 == 0)
                {
                    if(l1 > l2)
                    {
                        cut1--;
                        l1 = cut1 == 0 ? Integer.MIN_VALUE : nums1[cut1 - 1]; 
                    }
                    else if(l1 < l2)
                    {
                        cut2--;
                        l2 = cut2 == 0 ? Integer.MIN_VALUE : nums2[cut2 - 1];
                    }
                    sum += (double)Math.max(l1, l2);
                    return sum/(2.0);
                }
                return sum;
            }
            else if (l1 > r2) {
                high = cut1 - 1;
            }
            else {
                low = cut1 + 1; 
            }
        }
        return 1;
    }
}
