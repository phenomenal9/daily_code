class Solution {
    
    public void solve(int col, int n, int[] left, int[] upperDiag, int[] lowerDiag, List<List<String>> result, char[][] board) {
        if(col == n) {
            List<String> ls = new ArrayList<>();
            for(int i = 0; i < n; i++) {
                ls.add(new String(board[i]));
            }
            result.add(new ArrayList<>(ls));
            return;
        }
        
        for(int row = 0; row < n; row++) {
            if(left[row] == 0 && lowerDiag[row + col] == 0 && upperDiag[n - 1 + (col - row)] == 0) {
                board[row][col] = 'Q';
                left[row] = 1;
                lowerDiag[row + col] = 1;
                upperDiag[n - 1 + (col - row)] = 1;
                solve(col + 1, n, left, upperDiag, lowerDiag, result, board);
                board[row][col] = '.';
                left[row] = 0;
                lowerDiag[row + col] = 0;
                upperDiag[n - 1 + (col - row)] = 0;
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        char[][] board = new char[n][n];
        
        for(int i = 0; i < n; i++) {
            Arrays.fill(board[i], '.');
        }
        
        int[] left = new int[n];
        int[] upperDiag = new int[2*n-1];
        int[] lowerDiag = new int[2*n-1];
        
        solve(0, n, left, upperDiag, lowerDiag, result, board);
        
        return result;
    }
}
