class Solution {
    List<List<Integer>> result = new ArrayList<>();
    public void solve(int[] candidates, int idx, List<Integer> op, int target) {
        if(target == 0) {
            result.add(op);
            return;
        }
        else if(idx < 0) return;
        
        if(candidates[idx] <= target) {
            List<Integer> temp1 = new ArrayList<>();
            List<Integer> temp2 = new ArrayList<>();

            for(int i=0; i<op.size(); i++){
                temp1.add(op.get(i));
                temp2.add(op.get(i));
            }
            
            temp2.add(candidates[idx]);
            solve(candidates, idx - 1, temp1, target);
            solve(candidates, idx, temp2, target - candidates[idx]);
        }
        
        else {
            solve(candidates, idx - 1, op, target);
        }
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        solve(candidates, candidates.length - 1, new ArrayList<Integer>(), target);
        
        return result;
    }
}
