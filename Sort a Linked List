/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null)   return head;
        
        ListNode prev = null;
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast != null && fast.next != null)
        {
            prev = slow;
            fast = fast.next.next;
            slow = slow.next;
        }
        prev.next = null;
        //if(head == slow) return head;
        ListNode l1 = sortList(head);
        ListNode l2 = sortList(slow);
        
        if(l1 == null && l2 == null) return null;
        return merge(l1, l2);
    }
    
    public ListNode merge(ListNode l1, ListNode l2)
    {
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        ListNode dummy = new ListNode(Integer.MIN_VALUE);
        ListNode head = dummy;
        ListNode curr1 = l1;
        ListNode curr2 = l2;
        
        while(curr1 != null && curr2 != null) {
            if(curr1.val < curr2.val) {
                dummy.next = curr1;
                dummy = dummy.next;
                curr1 = curr1.next;
            }
            else
            {
                dummy.next = curr2;
                dummy = dummy.next;
                curr2 = curr2.next;
            }
        }
        if(curr2 != null) {
            dummy.next = curr2;
        }
        
        if(curr1 != null) {
            dummy.next = curr1;
        }
        return head.next;
    }
}
