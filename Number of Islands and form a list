class DisjointSet {
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    public DisjointSet(int n) {
        for (int i = 0; i < n; i++) {
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node) {
        if (node == parent.get(node)) {
            return node;
        }
        int ulp = findUPar(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }

    public void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank.get(ulp_u) < rank.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
        } else if (rank.get(ulp_v) < rank.get(ulp_u)) {
            parent.set(ulp_v, ulp_u);
        } else {
            parent.set(ulp_v, ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u, rankU + 1);
        }
    }

    public void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size.get(ulp_u) < size.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        } else {
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
}
class Solution {
    
    public List<Integer> numOfIslands(int rows, int cols, int[][] operators) {
        //Your code here
        List<Integer> res = new ArrayList<>();
        
        DisjointSet ds = new DisjointSet(rows*cols);
        int[] visited = new int[rows*cols];
        
        int[] dx = {0, 1, 0, -1};
        int[] dy = {1, 0, -1, 0};
        
        int cnt = 0;
        for(int i=0; i<operators.length; i++){
            int node = operators[i][0]*cols + operators[i][1];
            if(visited[node] == 0){
                visited[node] = 1;
                cnt++;
                for(int j=0; j<4; j++)
                {
                    int nr = operators[i][0] + dx[j];
                    int nc = operators[i][1] + dy[j];
                    
                    if(nr<0 || nc<0 || nr==rows || nc==cols) continue;
                    
                    int adjNode = nr*cols + nc;
                    
                    if(visited[adjNode] == 1)
                    {
                        int pu = ds.findUPar(node);
                        int pv = ds.findUPar(adjNode);
                        
                        if(pu != pv) {
                            ds.unionBySize(node, adjNode);
                            cnt--;
                        }
                    }
                }
            }
            res.add(cnt);
        }
        return res;
    }
    
}
