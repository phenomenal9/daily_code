class TrieNode {
        TrieNode[] children = new TrieNode[2];
        
        TrieNode() {
            
        }
        
        boolean containsKey(int bit) {
            return children[bit] != null;
        }
        
        TrieNode get(int bit) {
            return children[bit];
        }
        
        void put(int bit, TrieNode node) {
            children[bit] = node;
        }
    }
    
class Trie {
    public TrieNode root;
    
    Trie() {
        this.root = new TrieNode();
    }
    
    public void insert(int num) {
        TrieNode curr = root;
        
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1; 
            if(!curr.containsKey(bit)) {
                curr.put(bit, new TrieNode()); 
            }
            curr = curr.get(bit); 
        }
    }
    
    public int maxXOR(int num) {
        TrieNode node = root;
        int maxNum = 0; 
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1; 
            if(node.containsKey(1 - bit)) {
                maxNum = maxNum | (1<<i);
                node = node.get( 1 - bit); 
            }
            else {
                node = node.get(bit); 
            }
        }
        //System.out.println(maxNum);
        return maxNum; 
    }
    
}
class Solution {
    
    public int[] maximizeXor(int[] nums, int[][] queries) {
        int[] result = new int[queries.length];
        Arrays.sort(nums);
        Trie trie = new Trie();
        ArrayList<ArrayList<Integer>> sortedQueries = new ArrayList<>();
        
        for(int i=0; i<queries.length; i++) {
            ArrayList<Integer> temp = new ArrayList<>();
            temp.add(queries[i][1]);
            temp.add(queries[i][0]);
            temp.add(i);
            sortedQueries.add(temp);
        }
        
        Collections.sort(sortedQueries, new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> a, ArrayList<Integer> b) {
                return a.get(0).compareTo(b.get(0));
            }
        });
        
        int idx = 0;
        
        for(int i = 0; i < queries.length; i++) {
            int mi = sortedQueries.get(i).get(0);
            int xi = sortedQueries.get(i).get(1);
            int queryIdx = sortedQueries.get(i).get(2);
            
            while(idx < nums.length && nums[idx] <= mi) {
                trie.insert(nums[idx]);
                idx++;
            }
            
            if(idx != 0) result[queryIdx] = trie.maxXOR(xi);
            else result[queryIdx] = -1;
        }
        return result;
    }
}
