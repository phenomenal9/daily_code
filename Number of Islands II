import java.util.*;
class DisjointSet {
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    public DisjointSet(int n) {
        for (int i = 0; i <= n; i++) {
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node) {
        if (node == parent.get(node)) {
            return node;
        }
        int ulp = findUPar(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }

    public void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank.get(ulp_u) < rank.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
        } else if (rank.get(ulp_v) < rank.get(ulp_u)) {
            parent.set(ulp_v, ulp_u);
        } else {
            parent.set(ulp_v, ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u, rankU + 1);
        }
    }

    public void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size.get(ulp_u) < size.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        } else {
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
}
public class Solution {
    public static int[] numberOfIslandII(int n, int m, int [][]queries, int q) {
        // Write your code here.
        //int numOfIslands = 1;
        DisjointSet ds = new DisjointSet(n * m);
        int[][] matrix = new int[n][m];
        int[] numOfIslands = new int[queries.length];
        numOfIslands[0] = 1;

        int[] dx = {0, 1, 0, -1};
        int[] dy = {1, 0, -1, 0};
        
        int count = 0;
        for(int i = 0; i < queries.length; i++) {
            int sr = queries[i][0];
            int sc = queries[i][1];
            matrix[sr][sc] = 1;

            count++;
            
            HashSet<Integer> hs = new HashSet<>();

            int currNode = sr * m + sc;
            for(int k = 0; k < 4; k++) {
                int nr = sr + dx[k];
                int nc = sc + dy[k];

                if(nr < 0 || nc < 0 || nr == n || nc == m || matrix[nr][nc] == 0) continue;

                int adjNode = nr * m + nc;
                if(ds.findUPar(adjNode) != ds.findUPar(currNode)) {
                    count--;
                }
                
                ds.unionBySize(adjNode, currNode);
            }

            numOfIslands[i] = count;
        }

        return numOfIslands;
    }
}
