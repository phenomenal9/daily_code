class Solution {
    public void reverse(char[] temp) {
        int i = 0;
        int j = temp.length - 1;
        
        while(i < j) {
            char a = temp[i];
            temp[i] = temp[j];
            temp[j] = a;
            i++;
            j--;
        }
    }
    
    public int findLCS(String text1, String text2, int m, int n) {
        int[][] t = new int[m+1][n+1];
        
        // Initialization
        
        for(int i=0; i<m+1; i++) 
            t[i][0] = 0;
        for(int j=0; j<n+1; j++)
            t[0][j] = 0;
        
        // Choice Diagram
        
        for(int i=1; i<m+1; i++) {
            for(int j=1; j<n+1; j++) {
                if(text1.charAt(i-1) == text2.charAt(j-1)) 
                    t[i][j] = 1 + t[i-1][j-1];
                else
                    t[i][j] = Math.max(t[i-1][j], t[i][j-1]);
            }
        }
        
        return t[m][n];
    }
    
    public int longestPalindromeSubseq(String s) {
        char[] temp = s.toCharArray();
        reverse(temp);
        String t = new String(temp);
        
        return findLCS(s, t, s.length(), t.length());
    }
    
    public int minInsertions(String s) {
        return s.length() - longestPalindromeSubseq(s);
    }
}
