class Solution
{
    //Function to return Breadth First Traversal of given graph.
    int timer = 1;
    public void dfs(int node, int parent, ArrayList<ArrayList<Integer>> adj, int[] visited,
                    int[] tin, int[] low, int[] mark) {
        
        visited[node] = 1;
        tin[node] = low[node] = timer;
        timer++;
        int child = 0;
        
        for(int adjNode : adj.get(node)) {
            if(parent == adjNode) continue;
            
            if(visited[adjNode] == 0) {
                dfs(adjNode, node, adj, visited, tin, low, mark);
                low[node] = Math.min(low[node], low[adjNode]);
                
                if(tin[node] <= low[adjNode] && parent != -1) {
                    mark[node] = 1;
                }
                child++;
            }
            
            else {
                low[node] = Math.min(low[node], tin[adjNode]);
            }
        }
        
        if(parent == -1 && child > 1)
            mark[node] = 1;
            
        return;
    } 
    public ArrayList<Integer> articulationPoints(int V,ArrayList<ArrayList<Integer>> adj)
    {
        // Code here
        
        ArrayList<Integer> res = new ArrayList<>();
        
        int[] visited = new int[V];
        int[] tin = new int[V];
        int[] low = new int[V];
        int[] mark = new int[V];
        
        for(int i=0; i<V; i++) {
            if(visited[i] == 0)
                dfs(i, -1, adj, visited, tin, low, mark);
        }
        
        for(int i=0; i<V; i++) {
            if(mark[i] == 1) res.add(i);
        }
        
        if(res.size() == 0) res.add(-1);
        
        return res;
    }
}
