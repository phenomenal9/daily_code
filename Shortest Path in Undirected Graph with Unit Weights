class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

        for(int i=0; i<n; i++)
            adj.add(new ArrayList<Integer>());
        
        for(int i=0; i<m; i++)
        {
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        
        int[] distanceArray = new int[n];
        for(int i=0; i<n; i++)
        {
            distanceArray[i] = -1;
        }
        Queue<Integer> q = new java.util.LinkedList<>();
        
        q.offer(src);
        
        distanceArray[src] = 0;
        
        while(!q.isEmpty())
        {
            int temp = q.poll();
            
            for(int node : adj.get(temp))
            {
                if(distanceArray[node] == -1)
                {
                    distanceArray[node] = distanceArray[temp] + 1;
                    q.offer(node);
                }
                else
                {
                    distanceArray[node] = Math.min(distanceArray[node], distanceArray[temp] + 1);
                }
            }
            
        }
        
        return distanceArray;
    }
}
