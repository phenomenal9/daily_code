class Solution {
    // Function to detect cycle in a directed graph.
    public boolean dfsCheck(ArrayList<ArrayList<Integer>> adj, int src, int[] visited, int[] pathVisited)
    {
        visited[src] = 1;
        pathVisited[src] = 1;
        for(int it: adj.get(src))
        {
            if(visited[it] == 0)
            {
                if(dfsCheck(adj, it, visited, pathVisited) == true)
                    return true;
            }
            else if(pathVisited[it] == 1)
            {
                return true;
            }
        }
        
        pathVisited[src] = 0;
        return false;
    }
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        int[] visited = new int[V];
        int[] pathVisited = new int[V];
        
        for(int i=0; i<V; i++)
        {
            if(visited[i] == 0)
            {
                if(dfsCheck(adj, i, visited, pathVisited) == true) return true;
            }
        }
        return false;
    }
}
