/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int findPath(TreeNode root, TreeNode p, Stack<TreeNode> s)
    {
        if(root == null)
            return 0;
        if(root == p)
        {
            s.push(root);
            return 1;
        }


        int left = findPath(root.left, p, s);
        if(left == 1) 
        {
            s.push(root);
            return 1;
        }
        int right = findPath(root.right, p, s);
        if(right == 1)
        {
            s.push(root);
            return 1;
        }

        return 0;
    }
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        Stack<TreeNode> s1 = new Stack<>();
        Stack<TreeNode> s2 = new Stack<>();
        
        findPath(root, p, s1);
        findPath(root, q, s2);
        
        TreeNode res = root;
        while(!s1.isEmpty() && !s2.isEmpty())
        {
            if(s1.peek() == s2.peek())
            {
                res = s1.peek();
                s1.pop();
                s2.pop();
            }
            else
                s2.pop();
        }
        
        return res;
    }
}
