// User function Template for Java
class Pair{
    int node;
    int edgeWt;

    Pair(int node, int edgeWt){
        this.node = node;
        this.edgeWt = edgeWt;
    }
}

class Tuple{
    int wt;
    int node;
    int parent;
    
    Tuple(int wt, int node, int parent){
        this.wt = wt;
        this.node = node;
        this.parent = parent;
    }
}

class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	    // Code Here. 
	    ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        
        for(int i=0; i<V; i++)
            adj.add(new ArrayList<Pair>());
        
        for(int i=0; i<edges.length; i++)
        {
            adj.get(edges[i][0]).add(new Pair(edges[i][1], edges[i][2]));
            adj.get(edges[i][1]).add(new Pair(edges[i][0], edges[i][2]));
        }
        
        int sum = 0;
        int[] visited = new int[V];
        
        PriorityQueue<Tuple> pq = new PriorityQueue<>((a,b) -> a.wt - b.wt);
        
        pq.offer(new Tuple(0, 0, -1));

        while(!pq.isEmpty()){
            int wt = pq.peek().wt;
            int node = pq.peek().node;
            //int parent = pq.peek().parent;
            pq.poll();
            
            if(visited[node] == 1) continue;
            
            visited[node] = 1;
            sum += wt;
                
            for(Pair iter : adj.get(node)){
                int adjNode = iter.node;
                int edgeWt = iter.edgeWt;
                
                if(visited[adjNode] == 0){
                    pq.offer(new Tuple(edgeWt, adjNode, node));
                }
            }
        }
        
        return sum;
        
	}
}
